import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting seeding...");

  // ◊ô◊¶◊ô◊®◊™ ◊ê◊ì◊û◊ô◊ü
  const adminPassword = await bcrypt.hash("admin123", 10);
  const admin = await prisma.user.upsert({
    where: { email: "admin@example.com" },
    update: {},
    create: {
      name: "Admin",
      email: "admin@example.com",
      password: adminPassword,
      role: "ADMIN",
    },
  });
  console.log("‚úÖ Admin user created:", admin.email);

  // ◊ô◊¶◊ô◊®◊™ ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ ◊ï◊™◊™◊ô÷æ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™
  const programmingCategory = await prisma.category.upsert({
    where: { name: "Programming" },
    update: {},
    create: {
      name: "Programming",
      subCategories: {
        create: [
          { name: "JavaScript" },
          { name: "Python" },
          { name: "React" },
        ],
      },
    },
  });
  console.log("‚úÖ Programming category created:", programmingCategory.name);

  const mathCategory = await prisma.category.upsert({
    where: { name: "Math" },
    update: {},
    create: {
      name: "Math",
      subCategories: {
        create: [
          { name: "Algebra" },
          { name: "Geometry" },
          { name: "Calculus" },
        ],
      },
    },
  });
  console.log("‚úÖ Math category created:", mathCategory.name);

  const englishCategory = await prisma.category.upsert({
    where: { name: "English" },
    update: {},
    create: {
      name: "English",
      subCategories: {
        create: [
          { name: "Grammar" },
          { name: "Vocabulary" },
          { name: "Writing" },
        ],
      },
    },
  });
  console.log("‚úÖ English category created:", englishCategory.name);

  // ◊ô◊¶◊ô◊®◊™ ◊û◊©◊™◊û◊© ◊®◊í◊ô◊ú
  const userPassword = await bcrypt.hash("user123", 10);
  const user = await prisma.user.upsert({
    where: { email: "user@example.com" },
    update: {},
    create: {
      name: "Test User",
      email: "user@example.com",
      password: userPassword,
      role: "USER",
    },
  });
  console.log("‚úÖ Test user created:", user.email);

  // ◊ô◊¶◊ô◊®◊™ ◊§◊®◊ï◊û◊§◊ò ◊ú◊ì◊ï◊í◊û◊î
  const jsSubCategory = await prisma.subCategory.findFirst({
    where: { name: "JavaScript" },
  });

  if (jsSubCategory) {
    const prompt = await prisma.prompt.create({
      data: {
        userId: user.id,
        categoryId: programmingCategory.id,
        subCategoryId: jsSubCategory.id,
        prompt: "◊õ◊™◊ï◊ë ◊§◊ï◊†◊ß◊¶◊ô◊î ◊©◊û◊ó◊ñ◊ô◊®◊î ◊ê◊™ ◊°◊õ◊ï◊ù ◊©◊†◊ô ◊û◊°◊§◊®◊ô◊ù",
        response: "function sum(a, b) { return a + b; }",
      },
    });
    console.log("‚úÖ Prompt created:", prompt.prompt);
  }
}

main()
  .then(async () => {
    console.log("üå± Seeding finished!");
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error("‚ùå Error during seeding:", e);
    await prisma.$disconnect();
    process.exit(1);
  });
